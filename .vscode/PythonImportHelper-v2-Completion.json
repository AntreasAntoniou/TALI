[
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "MISSING",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "tabnanny",
        "description": "tabnanny",
        "isExtraImport": true,
        "detail": "tabnanny",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "torch.nn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.nn",
        "description": "torch.nn",
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "torch.nn.functional",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.nn.functional",
        "description": "torch.nn.functional",
        "detail": "torch.nn.functional",
        "documentation": {}
    },
    {
        "label": "Accelerator",
        "importPath": "accelerate",
        "description": "accelerate",
        "isExtraImport": true,
        "detail": "accelerate",
        "documentation": {}
    },
    {
        "label": "DistributedDataParallelKwargs",
        "importPath": "accelerate",
        "description": "accelerate",
        "isExtraImport": true,
        "detail": "accelerate",
        "documentation": {}
    },
    {
        "label": "Accelerator",
        "importPath": "accelerate",
        "description": "accelerate",
        "isExtraImport": true,
        "detail": "accelerate",
        "documentation": {}
    },
    {
        "label": "Accelerator",
        "importPath": "accelerate",
        "description": "accelerate",
        "isExtraImport": true,
        "detail": "accelerate",
        "documentation": {}
    },
    {
        "label": "Accelerator",
        "importPath": "accelerate",
        "description": "accelerate",
        "isExtraImport": true,
        "detail": "accelerate",
        "documentation": {}
    },
    {
        "label": "Accelerator",
        "importPath": "accelerate",
        "description": "accelerate",
        "isExtraImport": true,
        "detail": "accelerate",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "torch.utils.data",
        "description": "torch.utils.data",
        "isExtraImport": true,
        "detail": "torch.utils.data",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tqdm",
        "description": "tqdm",
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "Callback",
        "importPath": "tali_wit.callbacks",
        "description": "tali_wit.callbacks",
        "isExtraImport": true,
        "detail": "tali_wit.callbacks",
        "documentation": {}
    },
    {
        "label": "CallbackHandler",
        "importPath": "tali_wit.callbacks",
        "description": "tali_wit.callbacks",
        "isExtraImport": true,
        "detail": "tali_wit.callbacks",
        "documentation": {}
    },
    {
        "label": "Interval",
        "importPath": "tali_wit.callbacks",
        "description": "tali_wit.callbacks",
        "isExtraImport": true,
        "detail": "tali_wit.callbacks",
        "documentation": {}
    },
    {
        "label": "UploadCheckpointsToHuggingFace",
        "importPath": "tali_wit.callbacks",
        "description": "tali_wit.callbacks",
        "isExtraImport": true,
        "detail": "tali_wit.callbacks",
        "documentation": {}
    },
    {
        "label": "Callback",
        "importPath": "tali_wit.callbacks",
        "description": "tali_wit.callbacks",
        "isExtraImport": true,
        "detail": "tali_wit.callbacks",
        "documentation": {}
    },
    {
        "label": "Interval",
        "importPath": "tali_wit.callbacks",
        "description": "tali_wit.callbacks",
        "isExtraImport": true,
        "detail": "tali_wit.callbacks",
        "documentation": {}
    },
    {
        "label": "ClassificationEvaluator",
        "importPath": "tali_wit.evaluators",
        "description": "tali_wit.evaluators",
        "isExtraImport": true,
        "detail": "tali_wit.evaluators",
        "documentation": {}
    },
    {
        "label": "Evaluator",
        "importPath": "tali_wit.evaluators",
        "description": "tali_wit.evaluators",
        "isExtraImport": true,
        "detail": "tali_wit.evaluators",
        "documentation": {}
    },
    {
        "label": "ClassificationEvaluator",
        "importPath": "tali_wit.evaluators",
        "description": "tali_wit.evaluators",
        "isExtraImport": true,
        "detail": "tali_wit.evaluators",
        "documentation": {}
    },
    {
        "label": "ClassificationTrainer",
        "importPath": "tali_wit.trainers",
        "description": "tali_wit.trainers",
        "isExtraImport": true,
        "detail": "tali_wit.trainers",
        "documentation": {}
    },
    {
        "label": "Trainer",
        "importPath": "tali_wit.trainers",
        "description": "tali_wit.trainers",
        "isExtraImport": true,
        "detail": "tali_wit.trainers",
        "documentation": {}
    },
    {
        "label": "ClassificationTrainer",
        "importPath": "tali_wit.trainers",
        "description": "tali_wit.trainers",
        "isExtraImport": true,
        "detail": "tali_wit.trainers",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "tali_wit.utils",
        "description": "tali_wit.utils",
        "isExtraImport": true,
        "detail": "tali_wit.utils",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "tali_wit.utils",
        "description": "tali_wit.utils",
        "isExtraImport": true,
        "detail": "tali_wit.utils",
        "documentation": {}
    },
    {
        "label": "load_json",
        "importPath": "tali_wit.utils",
        "description": "tali_wit.utils",
        "isExtraImport": true,
        "detail": "tali_wit.utils",
        "documentation": {}
    },
    {
        "label": "save_json",
        "importPath": "tali_wit.utils",
        "description": "tali_wit.utils",
        "isExtraImport": true,
        "detail": "tali_wit.utils",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "tali_wit.utils",
        "description": "tali_wit.utils",
        "isExtraImport": true,
        "detail": "tali_wit.utils",
        "documentation": {}
    },
    {
        "label": "save_json",
        "importPath": "tali_wit.utils",
        "description": "tali_wit.utils",
        "isExtraImport": true,
        "detail": "tali_wit.utils",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "tali_wit.utils",
        "description": "tali_wit.utils",
        "isExtraImport": true,
        "detail": "tali_wit.utils",
        "documentation": {}
    },
    {
        "label": "pretty_config",
        "importPath": "tali_wit.utils",
        "description": "tali_wit.utils",
        "isExtraImport": true,
        "detail": "tali_wit.utils",
        "documentation": {}
    },
    {
        "label": "set_seed",
        "importPath": "tali_wit.utils",
        "description": "tali_wit.utils",
        "isExtraImport": true,
        "detail": "tali_wit.utils",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "wandb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wandb",
        "description": "wandb",
        "detail": "wandb",
        "documentation": {}
    },
    {
        "label": "Optimizer",
        "importPath": "torch.optim",
        "description": "torch.optim",
        "isExtraImport": true,
        "detail": "torch.optim",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm.rich",
        "description": "tqdm.rich",
        "isExtraImport": true,
        "detail": "tqdm.rich",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "timm",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "timm",
        "description": "timm",
        "detail": "timm",
        "documentation": {}
    },
    {
        "label": "ConfigStore",
        "importPath": "hydra.core.config_store",
        "description": "hydra.core.config_store",
        "isExtraImport": true,
        "detail": "hydra.core.config_store",
        "documentation": {}
    },
    {
        "label": "MISSING",
        "importPath": "hydra_zen",
        "description": "hydra_zen",
        "isExtraImport": true,
        "detail": "hydra_zen",
        "documentation": {}
    },
    {
        "label": "ZenField",
        "importPath": "hydra_zen",
        "description": "hydra_zen",
        "isExtraImport": true,
        "detail": "hydra_zen",
        "documentation": {}
    },
    {
        "label": "builds",
        "importPath": "hydra_zen",
        "description": "hydra_zen",
        "isExtraImport": true,
        "detail": "hydra_zen",
        "documentation": {}
    },
    {
        "label": "hydrated_dataclass",
        "importPath": "hydra_zen",
        "description": "hydra_zen",
        "isExtraImport": true,
        "detail": "hydra_zen",
        "documentation": {}
    },
    {
        "label": "make_config",
        "importPath": "hydra_zen",
        "description": "hydra_zen",
        "isExtraImport": true,
        "detail": "hydra_zen",
        "documentation": {}
    },
    {
        "label": "builds",
        "importPath": "hydra_zen",
        "description": "hydra_zen",
        "isExtraImport": true,
        "detail": "hydra_zen",
        "documentation": {}
    },
    {
        "label": "instantiate",
        "importPath": "hydra_zen",
        "description": "hydra_zen",
        "isExtraImport": true,
        "detail": "hydra_zen",
        "documentation": {}
    },
    {
        "label": "builds",
        "importPath": "hydra_zen",
        "description": "hydra_zen",
        "isExtraImport": true,
        "detail": "hydra_zen",
        "documentation": {}
    },
    {
        "label": "instantiate",
        "importPath": "hydra_zen",
        "description": "hydra_zen",
        "isExtraImport": true,
        "detail": "hydra_zen",
        "documentation": {}
    },
    {
        "label": "instantiate",
        "importPath": "hydra_zen",
        "description": "hydra_zen",
        "isExtraImport": true,
        "detail": "hydra_zen",
        "documentation": {}
    },
    {
        "label": "instantiate",
        "importPath": "hydra_zen",
        "description": "hydra_zen",
        "isExtraImport": true,
        "detail": "hydra_zen",
        "documentation": {}
    },
    {
        "label": "instantiate",
        "importPath": "hydra_zen",
        "description": "hydra_zen",
        "isExtraImport": true,
        "detail": "hydra_zen",
        "documentation": {}
    },
    {
        "label": "OmegaConf",
        "importPath": "omegaconf",
        "description": "omegaconf",
        "isExtraImport": true,
        "detail": "omegaconf",
        "documentation": {}
    },
    {
        "label": "OmegaConf",
        "importPath": "omegaconf",
        "description": "omegaconf",
        "isExtraImport": true,
        "detail": "omegaconf",
        "documentation": {}
    },
    {
        "label": "DictConfig",
        "importPath": "omegaconf",
        "description": "omegaconf",
        "isExtraImport": true,
        "detail": "omegaconf",
        "documentation": {}
    },
    {
        "label": "OmegaConf",
        "importPath": "omegaconf",
        "description": "omegaconf",
        "isExtraImport": true,
        "detail": "omegaconf",
        "documentation": {}
    },
    {
        "label": "CosineLRScheduler",
        "importPath": "timm.scheduler",
        "description": "timm.scheduler",
        "isExtraImport": true,
        "detail": "timm.scheduler",
        "documentation": {}
    },
    {
        "label": "Learner",
        "importPath": "tali_wit.boilerplate",
        "description": "tali_wit.boilerplate",
        "isExtraImport": true,
        "detail": "tali_wit.boilerplate",
        "documentation": {}
    },
    {
        "label": "Learner",
        "importPath": "tali_wit.boilerplate",
        "description": "tali_wit.boilerplate",
        "isExtraImport": true,
        "detail": "tali_wit.boilerplate",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "ProcessPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "datasets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datasets",
        "description": "datasets",
        "detail": "datasets",
        "documentation": {}
    },
    {
        "label": "load_dataset",
        "importPath": "datasets",
        "description": "datasets",
        "isExtraImport": true,
        "detail": "datasets",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "PIL",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PIL",
        "description": "PIL",
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "pyarrow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyarrow",
        "description": "pyarrow",
        "detail": "pyarrow",
        "documentation": {}
    },
    {
        "label": "pyarrow.dataset",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyarrow.dataset",
        "description": "pyarrow.dataset",
        "detail": "pyarrow.dataset",
        "documentation": {}
    },
    {
        "label": "pyarrow.parquet",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyarrow.parquet",
        "description": "pyarrow.parquet",
        "detail": "pyarrow.parquet",
        "documentation": {}
    },
    {
        "label": "EncodedVideo",
        "importPath": "pytorchvideo.data.encoded_video",
        "description": "pytorchvideo.data.encoded_video",
        "isExtraImport": true,
        "detail": "pytorchvideo.data.encoded_video",
        "documentation": {}
    },
    {
        "label": "ApplyTransformToKey",
        "importPath": "pytorchvideo.transforms",
        "description": "pytorchvideo.transforms",
        "isExtraImport": true,
        "detail": "pytorchvideo.transforms",
        "documentation": {}
    },
    {
        "label": "ShortSideScale",
        "importPath": "pytorchvideo.transforms",
        "description": "pytorchvideo.transforms",
        "isExtraImport": true,
        "detail": "pytorchvideo.transforms",
        "documentation": {}
    },
    {
        "label": "UniformTemporalSubsample",
        "importPath": "pytorchvideo.transforms",
        "description": "pytorchvideo.transforms",
        "isExtraImport": true,
        "detail": "pytorchvideo.transforms",
        "documentation": {}
    },
    {
        "label": "default_collate",
        "importPath": "torch.utils.data.dataloader",
        "description": "torch.utils.data.dataloader",
        "isExtraImport": true,
        "detail": "torch.utils.data.dataloader",
        "documentation": {}
    },
    {
        "label": "Compose",
        "importPath": "torchvision.transforms",
        "description": "torchvision.transforms",
        "isExtraImport": true,
        "detail": "torchvision.transforms",
        "documentation": {}
    },
    {
        "label": "RandomCrop",
        "importPath": "torchvision.transforms",
        "description": "torchvision.transforms",
        "isExtraImport": true,
        "detail": "torchvision.transforms",
        "documentation": {}
    },
    {
        "label": "Resize",
        "importPath": "torchvision.transforms",
        "description": "torchvision.transforms",
        "isExtraImport": true,
        "detail": "torchvision.transforms",
        "documentation": {}
    },
    {
        "label": "ToTensor",
        "importPath": "torchvision.transforms",
        "description": "torchvision.transforms",
        "isExtraImport": true,
        "detail": "torchvision.transforms",
        "documentation": {}
    },
    {
        "label": "ToTensor",
        "importPath": "torchvision.transforms",
        "description": "torchvision.transforms",
        "isExtraImport": true,
        "detail": "torchvision.transforms",
        "documentation": {}
    },
    {
        "label": "CenterCropVideo",
        "importPath": "torchvision.transforms._transforms_video",
        "description": "torchvision.transforms._transforms_video",
        "isExtraImport": true,
        "detail": "torchvision.transforms._transforms_video",
        "documentation": {}
    },
    {
        "label": "default",
        "importPath": "traitlets",
        "description": "traitlets",
        "isExtraImport": true,
        "detail": "traitlets",
        "documentation": {}
    },
    {
        "label": "CLIPModel",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "CLIPProcessor",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "CLIPModel",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "CLIPProcessor",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "WhisperModel",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "WhisperProcessor",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "WhisperFeatureExtractor",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "WhisperProcessor",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "WhisperForConditionalGeneration",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "configurable",
        "importPath": "tali_wit.decorators",
        "description": "tali_wit.decorators",
        "isExtraImport": true,
        "detail": "tali_wit.decorators",
        "documentation": {}
    },
    {
        "label": "configurable",
        "importPath": "tali_wit.decorators",
        "description": "tali_wit.decorators",
        "isExtraImport": true,
        "detail": "tali_wit.decorators",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "attr",
        "description": "attr",
        "isExtraImport": true,
        "detail": "attr",
        "documentation": {}
    },
    {
        "label": "extract_all_possible_pairs",
        "importPath": "tali_wit.models",
        "description": "tali_wit.models",
        "isExtraImport": true,
        "detail": "tali_wit.models",
        "documentation": {}
    },
    {
        "label": "ModelAndTransform",
        "importPath": "tali_wit.models",
        "description": "tali_wit.models",
        "isExtraImport": true,
        "detail": "tali_wit.models",
        "documentation": {}
    },
    {
        "label": "TALIModel",
        "importPath": "tali_wit.models",
        "description": "tali_wit.models",
        "isExtraImport": true,
        "detail": "tali_wit.models",
        "documentation": {}
    },
    {
        "label": "extract_all_possible_pairs",
        "importPath": "tali_wit.models",
        "description": "tali_wit.models",
        "isExtraImport": true,
        "detail": "tali_wit.models",
        "documentation": {}
    },
    {
        "label": "transforms",
        "importPath": "torchvision",
        "description": "torchvision",
        "isExtraImport": true,
        "detail": "torchvision",
        "documentation": {}
    },
    {
        "label": "CLIPOutput",
        "importPath": "transformers.models.clip.modeling_clip",
        "description": "transformers.models.clip.modeling_clip",
        "isExtraImport": true,
        "detail": "transformers.models.clip.modeling_clip",
        "documentation": {}
    },
    {
        "label": "contrastive_loss",
        "importPath": "transformers.models.clip.modeling_clip",
        "description": "transformers.models.clip.modeling_clip",
        "isExtraImport": true,
        "detail": "transformers.models.clip.modeling_clip",
        "documentation": {}
    },
    {
        "label": "ModalityTypes",
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "isExtraImport": true,
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "TALIDataset",
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "isExtraImport": true,
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "dataclass_collate",
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "isExtraImport": true,
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "install",
        "importPath": "rich.traceback",
        "description": "rich.traceback",
        "isExtraImport": true,
        "detail": "rich.traceback",
        "documentation": {}
    },
    {
        "label": "install",
        "importPath": "rich.traceback",
        "description": "rich.traceback",
        "isExtraImport": true,
        "detail": "rich.traceback",
        "documentation": {}
    },
    {
        "label": "hydra",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hydra",
        "description": "hydra",
        "detail": "hydra",
        "documentation": {}
    },
    {
        "label": "Repository",
        "importPath": "huggingface_hub",
        "description": "huggingface_hub",
        "isExtraImport": true,
        "detail": "huggingface_hub",
        "documentation": {}
    },
    {
        "label": "create_repo",
        "importPath": "huggingface_hub",
        "description": "huggingface_hub",
        "isExtraImport": true,
        "detail": "huggingface_hub",
        "documentation": {}
    },
    {
        "label": "hf_hub_download",
        "importPath": "huggingface_hub",
        "description": "huggingface_hub",
        "isExtraImport": true,
        "detail": "huggingface_hub",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "huggingface_hub",
        "description": "huggingface_hub",
        "isExtraImport": true,
        "detail": "huggingface_hub",
        "documentation": {}
    },
    {
        "label": "snapshot_download",
        "importPath": "huggingface_hub",
        "description": "huggingface_hub",
        "isExtraImport": true,
        "detail": "huggingface_hub",
        "documentation": {}
    },
    {
        "label": "BaseConfig",
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "isExtraImport": true,
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "collect_config_store",
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "isExtraImport": true,
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "RichHandler",
        "importPath": "rich.logging",
        "description": "rich.logging",
        "isExtraImport": true,
        "detail": "rich.logging",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "rich.syntax",
        "description": "rich.syntax",
        "isExtraImport": true,
        "detail": "rich.syntax",
        "documentation": {}
    },
    {
        "label": "Tree",
        "importPath": "rich.tree",
        "description": "rich.tree",
        "isExtraImport": true,
        "detail": "rich.tree",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "orjson",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "orjson",
        "description": "orjson",
        "detail": "orjson",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "get_scripts",
        "kind": 2,
        "importPath": "kubernetes.run_kube_experiments",
        "description": "kubernetes.run_kube_experiments",
        "peekOfCode": "def get_scripts(exp_name: str, batch_sizes: List[int]):\n    script_list = []\n    for batch_size in batch_sizes:\n        current_script_text = f\"/opt/conda/envs/main/bin/accelerate-launch --mixed_precision=bf16 /app/mlproject/run.py exp_name={exp_name} train_batch_size={batch_size} eval_batch_size={batch_size} code_dir=/app/\"\n        script_list.append(current_script_text)\n    return script_list\nif __name__ == \"__main__\":\n    from bwatchcompute.kubernetes.job import Job\n    script_list = get_scripts(\n        exp_name=os.getenv(\"EXPERIMENT_NAME_PREFIX\"),",
        "detail": "kubernetes.run_kube_experiments",
        "documentation": {}
    },
    {
        "label": "Learner",
        "kind": 6,
        "importPath": "tali_wit.boilerplate",
        "description": "tali_wit.boilerplate",
        "peekOfCode": "class Learner(nn.Module):\n    def __init__(\n        self,\n        experiment_name: str,\n        experiment_dir: Union[str, Path],\n        model: torch.nn.Module,\n        resume: Union[bool, str] = False,\n        evaluate_every_n_steps: int = None,\n        evaluate_every_n_epochs: int = None,\n        checkpoint_every_n_steps: int = None,",
        "detail": "tali_wit.boilerplate",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tali_wit.boilerplate",
        "description": "tali_wit.boilerplate",
        "peekOfCode": "logger = get_logger(__name__)\nclass Learner(nn.Module):\n    def __init__(\n        self,\n        experiment_name: str,\n        experiment_dir: Union[str, Path],\n        model: torch.nn.Module,\n        resume: Union[bool, str] = False,\n        evaluate_every_n_steps: int = None,\n        evaluate_every_n_epochs: int = None,",
        "detail": "tali_wit.boilerplate",
        "documentation": {}
    },
    {
        "label": "Interval",
        "kind": 6,
        "importPath": "tali_wit.callbacks",
        "description": "tali_wit.callbacks",
        "peekOfCode": "class Interval:\n    EPOCH: str = \"epoch\"\n    STEP: str = \"step\"\nclass Callback(object):\n    def __init__(self) -> None:\n        pass\n    def on_init_start(\n        self,\n        experiment: Any,\n        model: nn.Module,",
        "detail": "tali_wit.callbacks",
        "documentation": {}
    },
    {
        "label": "Callback",
        "kind": 6,
        "importPath": "tali_wit.callbacks",
        "description": "tali_wit.callbacks",
        "peekOfCode": "class Callback(object):\n    def __init__(self) -> None:\n        pass\n    def on_init_start(\n        self,\n        experiment: Any,\n        model: nn.Module,\n        train_dataloader: DataLoader = None,\n        val_dataloaders: Union[List[DataLoader], DataLoader] = None,\n        test_dataloaders: Union[List[DataLoader], DataLoader] = None,",
        "detail": "tali_wit.callbacks",
        "documentation": {}
    },
    {
        "label": "CallbackHandler",
        "kind": 6,
        "importPath": "tali_wit.callbacks",
        "description": "tali_wit.callbacks",
        "peekOfCode": "class CallbackHandler(Callback):\n    def __init__(self, callbacks: List[Callback]) -> None:\n        super().__init__()\n        self.callbacks = callbacks\n    def on_init_start(\n        self,\n        experiment: Any,\n        model: nn.Module,\n        train_dataloaders: DataLoader = None,\n        val_dataloaders: Union[List[DataLoader], DataLoader] = None,",
        "detail": "tali_wit.callbacks",
        "documentation": {}
    },
    {
        "label": "UploadCheckpointToHuggingFaceBackground",
        "kind": 6,
        "importPath": "tali_wit.callbacks",
        "description": "tali_wit.callbacks",
        "peekOfCode": "class UploadCheckpointToHuggingFaceBackground(threading.Thread):\n    def __init__(self, repo_name: str, repo_owner: str, checkpoint_path: Path):\n        from huggingface_hub import HfApi\n        super().__init__()\n        self.repo_name = repo_name\n        self.repo_owner = repo_owner\n        self.checkpoint_path = checkpoint_path\n        self.hf_api = HfApi()\n    def run(self):\n        self.hf_api.upload_folder(",
        "detail": "tali_wit.callbacks",
        "documentation": {}
    },
    {
        "label": "UploadCheckpointsToHuggingFace",
        "kind": 6,
        "importPath": "tali_wit.callbacks",
        "description": "tali_wit.callbacks",
        "peekOfCode": "class UploadCheckpointsToHuggingFace(Callback):\n    def __init__(self, repo_name: str, repo_owner: str):\n        from huggingface_hub import HfApi\n        super().__init__()\n        self.repo_name = repo_name\n        self.repo_owner = repo_owner\n        self.hf_api = HfApi()\n    def on_save_checkpoint(\n        self,\n        model: nn.Module,",
        "detail": "tali_wit.callbacks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tali_wit.callbacks",
        "description": "tali_wit.callbacks",
        "peekOfCode": "logger = get_logger(__name__, set_default_rich_handler=True)\n@dataclass\nclass Interval:\n    EPOCH: str = \"epoch\"\n    STEP: str = \"step\"\nclass Callback(object):\n    def __init__(self) -> None:\n        pass\n    def on_init_start(\n        self,",
        "detail": "tali_wit.callbacks",
        "documentation": {}
    },
    {
        "label": "BaseConfig",
        "kind": 6,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "class BaseConfig:\n    # Must be passed at command line -- neccesary arguments\n    exp_name: str = MISSING\n    # Defaults for these are provided in the collect_config_store method,\n    # but will be often overridden at command line\n    model: Any = MISSING\n    dataset: Any = MISSING\n    dataloader: Any = MISSING\n    optimizer: Any = MISSING\n    scheduler: Any = MISSING",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "collect_config_store",
        "kind": 2,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "def collect_config_store():\n    config_store = ConfigStore.instance()\n    ###################################################################################\n    tali_vit_image_text_model_config = model_config(\n        image_text_model_name=\"openai/clip-vit-base-patch16\",\n        audio_model_name=\"openai/whisper-base\",\n        multi_modality_config=MultiModalityConfig(\n            image=ModalityConfig(support=True, pretrained=True),\n            text=ModalityConfig(support=True, pretrained=True),\n            audio=ModalityConfig(support=False, pretrained=False),",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "CHECKPOINT_DIR",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "CHECKPOINT_DIR = \"${hf_repo_dir}\"\nNUM_WORKERS = \"${num_workers}\"\nHF_USERNAME = \"${hf_username}\"\nCODE_DIR = \"${code_dir}\"\nDATASET_DIR = \"${data_dir}\"\nEXPERIMENT_NAME = \"${exp_name}\"\nEXPERIMENTS_ROOT_DIR = \"${root_experiment_dir}\"\nTRAIN_BATCH_SIZE = \"${train_batch_size}\"\nCURRENT_EXPERIMENT_DIR = \"${current_experiment_dir}\"\nTRAIN_ITERS = \"${learner.train_iters}\"",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "NUM_WORKERS",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "NUM_WORKERS = \"${num_workers}\"\nHF_USERNAME = \"${hf_username}\"\nCODE_DIR = \"${code_dir}\"\nDATASET_DIR = \"${data_dir}\"\nEXPERIMENT_NAME = \"${exp_name}\"\nEXPERIMENTS_ROOT_DIR = \"${root_experiment_dir}\"\nTRAIN_BATCH_SIZE = \"${train_batch_size}\"\nCURRENT_EXPERIMENT_DIR = \"${current_experiment_dir}\"\nTRAIN_ITERS = \"${learner.train_iters}\"\nREPO_PATH = \"${repo_path}\"",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "HF_USERNAME",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "HF_USERNAME = \"${hf_username}\"\nCODE_DIR = \"${code_dir}\"\nDATASET_DIR = \"${data_dir}\"\nEXPERIMENT_NAME = \"${exp_name}\"\nEXPERIMENTS_ROOT_DIR = \"${root_experiment_dir}\"\nTRAIN_BATCH_SIZE = \"${train_batch_size}\"\nCURRENT_EXPERIMENT_DIR = \"${current_experiment_dir}\"\nTRAIN_ITERS = \"${learner.train_iters}\"\nREPO_PATH = \"${repo_path}\"\nEXP_NAME = \"${exp_name}\"",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "CODE_DIR",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "CODE_DIR = \"${code_dir}\"\nDATASET_DIR = \"${data_dir}\"\nEXPERIMENT_NAME = \"${exp_name}\"\nEXPERIMENTS_ROOT_DIR = \"${root_experiment_dir}\"\nTRAIN_BATCH_SIZE = \"${train_batch_size}\"\nCURRENT_EXPERIMENT_DIR = \"${current_experiment_dir}\"\nTRAIN_ITERS = \"${learner.train_iters}\"\nREPO_PATH = \"${repo_path}\"\nEXP_NAME = \"${exp_name}\"\nSEED = \"${seed}\"",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "DATASET_DIR",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "DATASET_DIR = \"${data_dir}\"\nEXPERIMENT_NAME = \"${exp_name}\"\nEXPERIMENTS_ROOT_DIR = \"${root_experiment_dir}\"\nTRAIN_BATCH_SIZE = \"${train_batch_size}\"\nCURRENT_EXPERIMENT_DIR = \"${current_experiment_dir}\"\nTRAIN_ITERS = \"${learner.train_iters}\"\nREPO_PATH = \"${repo_path}\"\nEXP_NAME = \"${exp_name}\"\nSEED = \"${seed}\"\nRESUME = \"${resume}\"",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "EXPERIMENT_NAME",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "EXPERIMENT_NAME = \"${exp_name}\"\nEXPERIMENTS_ROOT_DIR = \"${root_experiment_dir}\"\nTRAIN_BATCH_SIZE = \"${train_batch_size}\"\nCURRENT_EXPERIMENT_DIR = \"${current_experiment_dir}\"\nTRAIN_ITERS = \"${learner.train_iters}\"\nREPO_PATH = \"${repo_path}\"\nEXP_NAME = \"${exp_name}\"\nSEED = \"${seed}\"\nRESUME = \"${resume}\"\nLOGGER_LEVEL = \"${logger_level}\"",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "EXPERIMENTS_ROOT_DIR",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "EXPERIMENTS_ROOT_DIR = \"${root_experiment_dir}\"\nTRAIN_BATCH_SIZE = \"${train_batch_size}\"\nCURRENT_EXPERIMENT_DIR = \"${current_experiment_dir}\"\nTRAIN_ITERS = \"${learner.train_iters}\"\nREPO_PATH = \"${repo_path}\"\nEXP_NAME = \"${exp_name}\"\nSEED = \"${seed}\"\nRESUME = \"${resume}\"\nLOGGER_LEVEL = \"${logger_level}\"\nwandb_args_config = builds(wandb.init, populate_full_signature=True)",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_BATCH_SIZE",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "TRAIN_BATCH_SIZE = \"${train_batch_size}\"\nCURRENT_EXPERIMENT_DIR = \"${current_experiment_dir}\"\nTRAIN_ITERS = \"${learner.train_iters}\"\nREPO_PATH = \"${repo_path}\"\nEXP_NAME = \"${exp_name}\"\nSEED = \"${seed}\"\nRESUME = \"${resume}\"\nLOGGER_LEVEL = \"${logger_level}\"\nwandb_args_config = builds(wandb.init, populate_full_signature=True)\nwandb_args_default = wandb_args_config(",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "CURRENT_EXPERIMENT_DIR",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "CURRENT_EXPERIMENT_DIR = \"${current_experiment_dir}\"\nTRAIN_ITERS = \"${learner.train_iters}\"\nREPO_PATH = \"${repo_path}\"\nEXP_NAME = \"${exp_name}\"\nSEED = \"${seed}\"\nRESUME = \"${resume}\"\nLOGGER_LEVEL = \"${logger_level}\"\nwandb_args_config = builds(wandb.init, populate_full_signature=True)\nwandb_args_default = wandb_args_config(\n    project=os.environ.get(\"WANDB_PROJECT\", \"mlproject\"),",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "TRAIN_ITERS",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "TRAIN_ITERS = \"${learner.train_iters}\"\nREPO_PATH = \"${repo_path}\"\nEXP_NAME = \"${exp_name}\"\nSEED = \"${seed}\"\nRESUME = \"${resume}\"\nLOGGER_LEVEL = \"${logger_level}\"\nwandb_args_config = builds(wandb.init, populate_full_signature=True)\nwandb_args_default = wandb_args_config(\n    project=os.environ.get(\"WANDB_PROJECT\", \"mlproject\"),\n    resume=\"allow\",  # allow, True, False, must",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "REPO_PATH",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "REPO_PATH = \"${repo_path}\"\nEXP_NAME = \"${exp_name}\"\nSEED = \"${seed}\"\nRESUME = \"${resume}\"\nLOGGER_LEVEL = \"${logger_level}\"\nwandb_args_config = builds(wandb.init, populate_full_signature=True)\nwandb_args_default = wandb_args_config(\n    project=os.environ.get(\"WANDB_PROJECT\", \"mlproject\"),\n    resume=\"allow\",  # allow, True, False, must\n    dir=CURRENT_EXPERIMENT_DIR,",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "EXP_NAME",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "EXP_NAME = \"${exp_name}\"\nSEED = \"${seed}\"\nRESUME = \"${resume}\"\nLOGGER_LEVEL = \"${logger_level}\"\nwandb_args_config = builds(wandb.init, populate_full_signature=True)\nwandb_args_default = wandb_args_config(\n    project=os.environ.get(\"WANDB_PROJECT\", \"mlproject\"),\n    resume=\"allow\",  # allow, True, False, must\n    dir=CURRENT_EXPERIMENT_DIR,\n    save_code=True,",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "SEED",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "SEED = \"${seed}\"\nRESUME = \"${resume}\"\nLOGGER_LEVEL = \"${logger_level}\"\nwandb_args_config = builds(wandb.init, populate_full_signature=True)\nwandb_args_default = wandb_args_config(\n    project=os.environ.get(\"WANDB_PROJECT\", \"mlproject\"),\n    resume=\"allow\",  # allow, True, False, must\n    dir=CURRENT_EXPERIMENT_DIR,\n    save_code=True,\n)",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "RESUME",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "RESUME = \"${resume}\"\nLOGGER_LEVEL = \"${logger_level}\"\nwandb_args_config = builds(wandb.init, populate_full_signature=True)\nwandb_args_default = wandb_args_config(\n    project=os.environ.get(\"WANDB_PROJECT\", \"mlproject\"),\n    resume=\"allow\",  # allow, True, False, must\n    dir=CURRENT_EXPERIMENT_DIR,\n    save_code=True,\n)\nHFModelUploadConfig = builds(",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "LOGGER_LEVEL",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "LOGGER_LEVEL = \"${logger_level}\"\nwandb_args_config = builds(wandb.init, populate_full_signature=True)\nwandb_args_default = wandb_args_config(\n    project=os.environ.get(\"WANDB_PROJECT\", \"mlproject\"),\n    resume=\"allow\",  # allow, True, False, must\n    dir=CURRENT_EXPERIMENT_DIR,\n    save_code=True,\n)\nHFModelUploadConfig = builds(\n    UploadCheckpointsToHuggingFace, populate_full_signature=True",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "wandb_args_config",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "wandb_args_config = builds(wandb.init, populate_full_signature=True)\nwandb_args_default = wandb_args_config(\n    project=os.environ.get(\"WANDB_PROJECT\", \"mlproject\"),\n    resume=\"allow\",  # allow, True, False, must\n    dir=CURRENT_EXPERIMENT_DIR,\n    save_code=True,\n)\nHFModelUploadConfig = builds(\n    UploadCheckpointsToHuggingFace, populate_full_signature=True\n)",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "wandb_args_default",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "wandb_args_default = wandb_args_config(\n    project=os.environ.get(\"WANDB_PROJECT\", \"mlproject\"),\n    resume=\"allow\",  # allow, True, False, must\n    dir=CURRENT_EXPERIMENT_DIR,\n    save_code=True,\n)\nHFModelUploadConfig = builds(\n    UploadCheckpointsToHuggingFace, populate_full_signature=True\n)\nhf_upload = HFModelUploadConfig(",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "HFModelUploadConfig",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "HFModelUploadConfig = builds(\n    UploadCheckpointsToHuggingFace, populate_full_signature=True\n)\nhf_upload = HFModelUploadConfig(\n    repo_name=EXPERIMENT_NAME, repo_owner=HF_USERNAME\n)\nadamw_optimizer_config = builds(\n    torch.optim.AdamW,\n    populate_full_signature=True,\n    zen_partial=True,",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "hf_upload",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "hf_upload = HFModelUploadConfig(\n    repo_name=EXPERIMENT_NAME, repo_owner=HF_USERNAME\n)\nadamw_optimizer_config = builds(\n    torch.optim.AdamW,\n    populate_full_signature=True,\n    zen_partial=True,\n)\ncosine_learning_rate_scheduler_config = builds(\n    CosineLRScheduler,",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "adamw_optimizer_config",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "adamw_optimizer_config = builds(\n    torch.optim.AdamW,\n    populate_full_signature=True,\n    zen_partial=True,\n)\ncosine_learning_rate_scheduler_config = builds(\n    CosineLRScheduler,\n    populate_full_signature=True,\n    zen_partial=True,\n)",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "cosine_learning_rate_scheduler_config",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "cosine_learning_rate_scheduler_config = builds(\n    CosineLRScheduler,\n    populate_full_signature=True,\n    zen_partial=True,\n)\naccelerator_config = builds(Accelerator, populate_full_signature=True)\ncosine_learning_rate_scheduler_config = cosine_learning_rate_scheduler_config()\nmodel_config = TALIModel.build_config(populate_full_signature=True)\ndataset_config = TALIDataset.build_config(populate_full_signature=True)\ndataloader_config = builds(",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "accelerator_config",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "accelerator_config = builds(Accelerator, populate_full_signature=True)\ncosine_learning_rate_scheduler_config = cosine_learning_rate_scheduler_config()\nmodel_config = TALIModel.build_config(populate_full_signature=True)\ndataset_config = TALIDataset.build_config(populate_full_signature=True)\ndataloader_config = builds(\n    DataLoader, dataset=None, populate_full_signature=True\n)\nlearner_config = builds(Learner, populate_full_signature=True)\nlearner_config = learner_config(\n    model=None,",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "cosine_learning_rate_scheduler_config",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "cosine_learning_rate_scheduler_config = cosine_learning_rate_scheduler_config()\nmodel_config = TALIModel.build_config(populate_full_signature=True)\ndataset_config = TALIDataset.build_config(populate_full_signature=True)\ndataloader_config = builds(\n    DataLoader, dataset=None, populate_full_signature=True\n)\nlearner_config = builds(Learner, populate_full_signature=True)\nlearner_config = learner_config(\n    model=None,\n    experiment_name=EXPERIMENT_NAME,",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "model_config",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "model_config = TALIModel.build_config(populate_full_signature=True)\ndataset_config = TALIDataset.build_config(populate_full_signature=True)\ndataloader_config = builds(\n    DataLoader, dataset=None, populate_full_signature=True\n)\nlearner_config = builds(Learner, populate_full_signature=True)\nlearner_config = learner_config(\n    model=None,\n    experiment_name=EXPERIMENT_NAME,\n    experiment_dir=CHECKPOINT_DIR,",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "dataset_config",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "dataset_config = TALIDataset.build_config(populate_full_signature=True)\ndataloader_config = builds(\n    DataLoader, dataset=None, populate_full_signature=True\n)\nlearner_config = builds(Learner, populate_full_signature=True)\nlearner_config = learner_config(\n    model=None,\n    experiment_name=EXPERIMENT_NAME,\n    experiment_dir=CHECKPOINT_DIR,\n    resume=RESUME,",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "dataloader_config",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "dataloader_config = builds(\n    DataLoader, dataset=None, populate_full_signature=True\n)\nlearner_config = builds(Learner, populate_full_signature=True)\nlearner_config = learner_config(\n    model=None,\n    experiment_name=EXPERIMENT_NAME,\n    experiment_dir=CHECKPOINT_DIR,\n    resume=RESUME,\n    evaluate_every_n_steps=500,",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "learner_config",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "learner_config = builds(Learner, populate_full_signature=True)\nlearner_config = learner_config(\n    model=None,\n    experiment_name=EXPERIMENT_NAME,\n    experiment_dir=CHECKPOINT_DIR,\n    resume=RESUME,\n    evaluate_every_n_steps=500,\n    checkpoint_after_validation=True,\n    checkpoint_every_n_steps=500,\n    train_iters=10000,",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "learner_config",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "learner_config = learner_config(\n    model=None,\n    experiment_name=EXPERIMENT_NAME,\n    experiment_dir=CHECKPOINT_DIR,\n    resume=RESUME,\n    evaluate_every_n_steps=500,\n    checkpoint_after_validation=True,\n    checkpoint_every_n_steps=500,\n    train_iters=10000,\n)",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "default_callbacks",
        "kind": 5,
        "importPath": "tali_wit.config",
        "description": "tali_wit.config",
        "peekOfCode": "default_callbacks = dict(hf_uploader=hf_upload)\n@dataclass\nclass BaseConfig:\n    # Must be passed at command line -- neccesary arguments\n    exp_name: str = MISSING\n    # Defaults for these are provided in the collect_config_store method,\n    # but will be often overridden at command line\n    model: Any = MISSING\n    dataset: Any = MISSING\n    dataloader: Any = MISSING",
        "detail": "tali_wit.config",
        "documentation": {}
    },
    {
        "label": "SplitType",
        "kind": 6,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "class SplitType:\n    TRAIN = \"train\"\n    VAL = \"val\"\n    TEST = \"test\"\n@dataclass\nclass MultiModalInput:\n    image: Any = None\n    audio: Any = None\n    video: Any = None\n    text: Any = None",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "MultiModalInput",
        "kind": 6,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "class MultiModalInput:\n    image: Any = None\n    audio: Any = None\n    video: Any = None\n    text: Any = None\ndef find_filepaths_with_extension(\n    dir_path: str, extension: str, limit_num_files: Optional[int]\n):\n    filepaths = []\n    with tqdm.tqdm(total=12000000) as pbar:",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "ChallengeSamplesSourceTypes",
        "kind": 6,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "class ChallengeSamplesSourceTypes:\n    WITHIN_USER: str = \"within_user\"\n    ACROSS_USERS: str = \"across_users\"\ndef rank_user_items_by_clip_score(username_filepath: pathlib.Path):\n    user_table = pq.read_table(username_filepath).to_pandas()\n    return user_table.sort_values(by=\"similarity\", ascending=False)\ndef get_ranked_filepaths_from_user(\n    username_filepath: pathlib.Path, top_k_percent_to_return: int\n):\n    ranked_user_items = rank_user_items_by_clip_score(username_filepath)",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "ToThreeChannels",
        "kind": 6,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "class ToThreeChannels(nn.Module):\n    def __init__(self):\n        super().__init__()\n    def forward(self, image):\n        if image.shape[0] == 1:\n            return image.repeat(3, 1, 1)\n        elif image.shape[0] == 2:\n            return torch.cat([image, image[0].unsqueeze(0)], dim=0)\n        elif image.shape[0] == 3:\n            return image",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "TALISchema",
        "kind": 6,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "class TALISchema:\n    wit_idx: pa.int64()\n    term_idx: pa.int64()\n    sort_type: pa.string()\n    age_restricted: pa.bool_()\n    author: pa.string()\n    channel_id: pa.string()\n    channel_url: pa.string()\n    description: pa.string()\n    embed_url: pa.string()",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "VideoCLIPScoreSchema",
        "kind": 6,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "class VideoCLIPScoreSchema:\n    wit_idx: pa.int32()\n    term_idx: pa.int32()\n    video_id: pa.string()\n    filepath: pa.string()\n    reference_text: pa.string()\n    scores_sorted_idx: pa.list_(pa.int32())\n    scores_sorted: pa.list_(pa.float32())\nvideo_score_schema = list(\n    VideoCLIPScoreSchema.__dict__[\"__annotations__\"].items()",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "CrossModalityTypes",
        "kind": 6,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "class CrossModalityTypes:\n    image_to_text = \"image_to_text\"\n    image_to_audio = \"image_to_audio\"\n    image_to_audio = \"image_to_video\"\n    text_to_audio = \"text_to_audio\"\n    text_to_video = \"text_to_video\"\n    audio_to_video = \"audio_to_video\"\nclass BaseModalityTypes(str, Enum):\n    image = \"image\"\n    audio = \"audio\"",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "BaseModalityTypes",
        "kind": 6,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "class BaseModalityTypes(str, Enum):\n    image = \"image\"\n    audio = \"audio\"\n    video = \"video\"\n    text = \"text\"\nclass SubModalityTypes(str, Enum):\n    wikipedia_caption_image = \"wikipedia_caption_image\"\n    youtube_random_video_sample_image = \"youtube_random_video_sample_image\"\n    youtube_thumbnail_image = \"youtube_thumbnail_image\"\n    wikipedia_caption_text = \"wikipedia_caption_text\"",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "SubModalityTypes",
        "kind": 6,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "class SubModalityTypes(str, Enum):\n    wikipedia_caption_image = \"wikipedia_caption_image\"\n    youtube_random_video_sample_image = \"youtube_random_video_sample_image\"\n    youtube_thumbnail_image = \"youtube_thumbnail_image\"\n    wikipedia_caption_text = \"wikipedia_caption_text\"\n    wikipedia_title_text = \"wikipedia_title_text\"\n    wikipedia_main_body_text = \"wikipedia_main_body_text\"\n    youtube_subtitle_text = \"youtube_subtitle_text\"\n    youtube_description_text = \"youtube_description_text\"\n    youtube_title_text = \"youtube_title_text\"",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "AnyModalSample",
        "kind": 6,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "class AnyModalSample:\n    modality: str\n    sub_modality: str\n    shape: tuple\nclass ModalityTypes(Enum):\n    wit_image = AnyModalSample(\n        modality=BaseModalityTypes.image,\n        sub_modality=SubModalityTypes.wikipedia_caption_image,\n        shape=(\"batch_size\", \"channel\", \"height\", \"width\"),\n    )",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "ModalityTypes",
        "kind": 6,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "class ModalityTypes(Enum):\n    wit_image = AnyModalSample(\n        modality=BaseModalityTypes.image,\n        sub_modality=SubModalityTypes.wikipedia_caption_image,\n        shape=(\"batch_size\", \"channel\", \"height\", \"width\"),\n    )\n    youtube_image = AnyModalSample(\n        modality=BaseModalityTypes.image,\n        sub_modality=SubModalityTypes.youtube_random_video_sample_image,\n        shape=(\"batch_size\", \"channel\", \"height\", \"width\"),",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "ModalityDataSample",
        "kind": 6,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "class ModalityDataSample:\n    data: Any\n    modality_type: Any\ndef videoclip_to_video_audio_tensors(\n    video_path: pathlib.Path,\n    return_video: bool,\n    return_audio: bool,\n    image_size: int,\n    clip_duration_in_seconds: float,\n    rng: np.random.Generator,",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "TermIDTranslation",
        "kind": 6,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "class TermIDTranslation:\n    title_prompted = 0\n    caption_prompted = 1\n@dataclass\nclass WitSample:\n    wikipedia_caption_image: Any\n    wikipedia_caption_text: Any\n    wikipedia_main_body_text: Any\n    wikipedia_title_text: Any\ndef get_wit_sample(",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "WitSample",
        "kind": 6,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "class WitSample:\n    wikipedia_caption_image: Any\n    wikipedia_caption_text: Any\n    wikipedia_main_body_text: Any\n    wikipedia_title_text: Any\ndef get_wit_sample(\n    dataset: Any,\n    wit_index: int,\n    language_id: str = \"en\",\n    image_size: int = 224,",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "WITFeature",
        "kind": 6,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "class WITFeature:\n    item_idx: int\n    language: str\n    page_url: str\n    image: PIL.Image.Image\n    image_url: str\n    attribution_passes_lang_id: bool\n    caption_alt_text_description: Optional[str] = None\n    caption_reference_description: Optional[str] = None\n    caption_title_and_reference_description: Optional[str] = None",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "DefaultVideoTransforms",
        "kind": 6,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "class DefaultVideoTransforms:\n    def __init__(self) -> None:\n        self.processor: CLIPProcessor = CLIPProcessor.from_pretrained(\n            \"openai/clip-vit-large-patch14\"\n        )\n    def __call__(self, x) -> Any:\n        x = x.unbind(0)\n        x = self.processor(images=x, return_tensors=\"pt\")[\"pixel_values\"]\n        return x\n@configurable",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "TALIDataset",
        "kind": 6,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "class TALIDataset(torch.utils.data.Dataset):\n    def __init__(\n        self,\n        set_name: str,\n        root_filepath: Union[str, pathlib.Path],\n        modality_list: List[AnyModalSample],\n        language_id: str = \"en\",\n        rng_seed: int = 42,\n        top_k_tali: int = 10,\n        image_size: int = 224,",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "find_filepaths_with_extension",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def find_filepaths_with_extension(\n    dir_path: str, extension: str, limit_num_files: Optional[int]\n):\n    filepaths = []\n    with tqdm.tqdm(total=12000000) as pbar:\n        for path in pathlib.Path(dir_path).iterdir():\n            if path.suffix == extension and path.is_file():\n                filepaths.append(str(path))\n                if limit_num_files is not None:\n                    if len(filepaths) >= limit_num_files:",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "extract_captions_from_file",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def extract_captions_from_file(filepath: str):\n    info_dict = load_json(filepath=filepath)\n    return info_dict[\"edge_media_to_caption\"][\"edges\"][0][\"node\"][\"text\"]\ndef check_if_image_has_matching_info_file(image_path: str):\n    if isinstance(image_path, pathlib.Path):\n        image_path = str(image_path)\n    info_file_path = pathlib.Path(\n        image_path.replace(\"image\", \"info\")\n    ).with_suffix(\".info\")\n    return info_file_path.exists()",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "check_if_image_has_matching_info_file",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def check_if_image_has_matching_info_file(image_path: str):\n    if isinstance(image_path, pathlib.Path):\n        image_path = str(image_path)\n    info_file_path = pathlib.Path(\n        image_path.replace(\"image\", \"info\")\n    ).with_suffix(\".info\")\n    return info_file_path.exists()\ndef get_user_and_post_id_from_image_path(image_path: str):\n    username, post_id = image_path.split(\"/\")[-1].split(\"-\")\n    post_id = post_id.split(\".\")[0]",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "get_user_and_post_id_from_image_path",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def get_user_and_post_id_from_image_path(image_path: str):\n    username, post_id = image_path.split(\"/\")[-1].split(\"-\")\n    post_id = post_id.split(\".\")[0]\n    return username, post_id\ndef generate_post_paths_from_user_name_and_post_id(\n    username: str,\n    post_id: str,\n    post_image_dir: str,\n    post_info_dir: str,\n):",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "generate_post_paths_from_user_name_and_post_id",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def generate_post_paths_from_user_name_and_post_id(\n    username: str,\n    post_id: str,\n    post_image_dir: str,\n    post_info_dir: str,\n):\n    image_path = os.path.join(post_image_dir, f\"{username}-{post_id}.jpg\")\n    info_path = os.path.join(post_info_dir, f\"{username}-{post_id}.info\")\n    return image_path, info_path\n@dataclass",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "rank_user_items_by_clip_score",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def rank_user_items_by_clip_score(username_filepath: pathlib.Path):\n    user_table = pq.read_table(username_filepath).to_pandas()\n    return user_table.sort_values(by=\"similarity\", ascending=False)\ndef get_ranked_filepaths_from_user(\n    username_filepath: pathlib.Path, top_k_percent_to_return: int\n):\n    ranked_user_items = rank_user_items_by_clip_score(username_filepath)\n    ranked_filepath_list = ranked_user_items[\"filepath\"].tolist()\n    top_k_percent_to_return = int(\n        len(ranked_filepath_list) * top_k_percent_to_return / 100",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "get_ranked_filepaths_from_user",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def get_ranked_filepaths_from_user(\n    username_filepath: pathlib.Path, top_k_percent_to_return: int\n):\n    ranked_user_items = rank_user_items_by_clip_score(username_filepath)\n    ranked_filepath_list = ranked_user_items[\"filepath\"].tolist()\n    top_k_percent_to_return = int(\n        len(ranked_filepath_list) * top_k_percent_to_return / 100\n    )\n    return ranked_filepath_list[:top_k_percent_to_return]\nclass ToThreeChannels(nn.Module):",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "default_image_transforms",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def default_image_transforms(image_size: int = 224):\n    return Compose(\n        [\n            Resize(image_size),\n            RandomCrop(image_size),\n            ToTensor(),\n            ToThreeChannels(),\n        ]\n    )\ndefault_image_transforms_config = builds(default_image_transforms)",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "dict_to_summary",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def dict_to_summary(batch: Dict):\n    summary_dict = defaultdict(list)\n    if not isinstance(batch, dict) and not isinstance(batch, list):\n        batch = [batch.__dict__]\n    if isinstance(batch, dict):\n        batch = [batch]\n    for item in batch:\n        for key, value in item.items():\n            # print(value)\n            if hasattr(value, \"shape\"):",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "dataclass_collate",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def dataclass_collate(batch):\n    \"\"\"Collate data from a list of dataclass objects.\n    Args:\n        batch (list): List of dataclass objects.\n    Returns:\n        dict: Dictionary of values from the dataclass objects.\n    \"\"\"\n    try:\n        if isinstance(batch[0], dict) or not hasattr(\n            batch[0], \"__dataclass_fields__\"",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "get_image_transforms_instait",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def get_image_transforms_instait():\n    return Compose([Resize((224, 224)), ToTensor(), ToThreeChannels()])\nimport pathlib\nfrom dataclasses import dataclass\nfrom typing import List\n@dataclass\nclass TALISchema:\n    wit_idx: pa.int64()\n    term_idx: pa.int64()\n    sort_type: pa.string()",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "videoclip_to_video_audio_tensors",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def videoclip_to_video_audio_tensors(\n    video_path: pathlib.Path,\n    return_video: bool,\n    return_audio: bool,\n    image_size: int,\n    clip_duration_in_seconds: float,\n    rng: np.random.Generator,\n):\n    video: EncodedVideo = EncodedVideo.from_path(video_path)\n    video_duration_in_seconds = float(video.duration)",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "get_wit_sample",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def get_wit_sample(\n    dataset: Any,\n    wit_index: int,\n    language_id: str = \"en\",\n    image_size: int = 224,\n    modality_list: List[ModalityTypes] = None,\n    if_none_return_random: bool = False,\n):\n    data_dict = get_language_specific_entries(\n        wit_idx=wit_index, wit_entry=dataset[int(wit_index)]",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "select_subtitles_between_timestamps",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def select_subtitles_between_timestamps(\n    subtitle_dict: Dict[str, str],\n    starting_timestamp: float,\n    ending_timestamp: float,\n):\n    selected_subtitles = \"\"\n    for subtitle_timestamp, subtitle_text in subtitle_dict.items():\n        subtitle_timestamp = float(subtitle_timestamp)\n        if (\n            float(subtitle_timestamp) >= starting_timestamp",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "get_base_modality",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def get_base_modality(submodality: str):\n    for item in list(ModalityTypes):\n        if item.value.sub_modality == submodality:\n            return item.value.modality\ndef get_tali_sample(\n    video_id: int,\n    modality_list: List[ModalityTypes],\n    rng_seed: int = 42,\n    root_filepath: pathlib.Path = pathlib.Path(\"/data/\"),\n    top_k: int = 10,",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "get_tali_sample",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def get_tali_sample(\n    video_id: int,\n    modality_list: List[ModalityTypes],\n    rng_seed: int = 42,\n    root_filepath: pathlib.Path = pathlib.Path(\"/data/\"),\n    top_k: int = 10,\n    image_size: int = 224,\n    clip_duration_in_seconds: float = 30,\n):\n    output_dict = {}",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "get_sample_from_wit_index",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def get_sample_from_wit_index(\n    dataset: Any,\n    wit_index: int,\n    rng_seed: int,\n    modality_list: List[ModalityTypes],\n    root_filepath: pathlib.Path = pathlib.Path(\"/data/\"),\n    top_k_wit: int = 10,\n    language_id: str = \"en\",\n    image_size: int = 224,\n    clip_duration_in_seconds: float = 30,",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "get_sample_from_video_id",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def get_sample_from_video_id(\n    dataset: Any,\n    video_id: str,\n    rng_seed: int,\n    modality_list: List[ModalityTypes],\n    root_filepath: pathlib.Path = pathlib.Path(\"/data/\"),\n    top_k_tali: int = 10,\n    language_id: str = \"en\",\n    image_size: int = 224,\n    clip_duration_in_seconds: float = 30,",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "get_language_specific_entries",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def get_language_specific_entries(\n    wit_idx: int, wit_entry: Any, language_id: List[str] = None\n):\n    if language_id is None:\n        language_id = [\"en\", \"uk\", \"fi\", \"da\", \"pl\", \"fr\"]\n    output_dict = {\n        \"image\": wit_entry[\"image\"],\n        \"image_url\": wit_entry[\"image_url\"],\n        \"item_idx\": wit_idx,\n    }",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "get_wit_sample_idx_with_video_available",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def get_wit_sample_idx_with_video_available(\n    root_path: pathlib.Path = pathlib.Path(\"/data/\"),\n):\n    wit_idx_to_tali_wit_table_path = defaultdict(list)\n    wit_to_video_paths_table_path = (\n        root_path / \"wit_to_video_paths.parquet\" / \"relevance\"\n    )\n    # /data/wit_to_video_paths.parquet/relevance/\n    with tqdm.tqdm(total=558) as top_pbar:\n        for top_level_dir in pathlib.Path(",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "get_dataset_both_way_dictionaries",
        "kind": 2,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "def get_dataset_both_way_dictionaries(\n    wit_idx_with_videos_dict_filepath: Union[\n        str, pathlib.Path\n    ] = \"/data/wit_idx_with_videos_dict.json\"\n):\n    wit_idx_with_videos_dict = load_json(\n        filepath=wit_idx_with_videos_dict_filepath\n    )\n    video_id_to_wit_idx_dict = defaultdict(str)\n    with tqdm.tqdm(total=len(wit_idx_with_videos_dict)) as pbar:",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "logger = get_logger(__name__)\n@dataclass\nclass SplitType:\n    TRAIN = \"train\"\n    VAL = \"val\"\n    TEST = \"test\"\n@dataclass\nclass MultiModalInput:\n    image: Any = None\n    audio: Any = None",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "default_image_transforms_config",
        "kind": 5,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "default_image_transforms_config = builds(default_image_transforms)\ndef dict_to_summary(batch: Dict):\n    summary_dict = defaultdict(list)\n    if not isinstance(batch, dict) and not isinstance(batch, list):\n        batch = [batch.__dict__]\n    if isinstance(batch, dict):\n        batch = [batch]\n    for item in batch:\n        for key, value in item.items():\n            # print(value)",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "tali_schema",
        "kind": 5,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "tali_schema = list(TALISchema.__dict__[\"__annotations__\"].items())\ntali_schema = pa.schema(tali_schema)\n@dataclass\nclass VideoCLIPScoreSchema:\n    wit_idx: pa.int32()\n    term_idx: pa.int32()\n    video_id: pa.string()\n    filepath: pa.string()\n    reference_text: pa.string()\n    scores_sorted_idx: pa.list_(pa.int32())",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "tali_schema",
        "kind": 5,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "tali_schema = pa.schema(tali_schema)\n@dataclass\nclass VideoCLIPScoreSchema:\n    wit_idx: pa.int32()\n    term_idx: pa.int32()\n    video_id: pa.string()\n    filepath: pa.string()\n    reference_text: pa.string()\n    scores_sorted_idx: pa.list_(pa.int32())\n    scores_sorted: pa.list_(pa.float32())",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "video_score_schema",
        "kind": 5,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "video_score_schema = list(\n    VideoCLIPScoreSchema.__dict__[\"__annotations__\"].items()\n)\nvideo_score_schema = pa.schema(video_score_schema)\n@dataclass\nclass CrossModalityTypes:\n    image_to_text = \"image_to_text\"\n    image_to_audio = \"image_to_audio\"\n    image_to_audio = \"image_to_video\"\n    text_to_audio = \"text_to_audio\"",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "video_score_schema",
        "kind": 5,
        "importPath": "tali_wit.data",
        "description": "tali_wit.data",
        "peekOfCode": "video_score_schema = pa.schema(video_score_schema)\n@dataclass\nclass CrossModalityTypes:\n    image_to_text = \"image_to_text\"\n    image_to_audio = \"image_to_audio\"\n    image_to_audio = \"image_to_video\"\n    text_to_audio = \"text_to_audio\"\n    text_to_video = \"text_to_video\"\n    audio_to_video = \"audio_to_video\"\nclass BaseModalityTypes(str, Enum):",
        "detail": "tali_wit.data",
        "documentation": {}
    },
    {
        "label": "configurable",
        "kind": 2,
        "importPath": "tali_wit.decorators",
        "description": "tali_wit.decorators",
        "peekOfCode": "def configurable(func: Callable) -> Callable:\n    func.__configurable__ = True\n    def build_config(**kwargs):\n        return builds(func, **kwargs)\n    setattr(func, \"build_config\", build_config)\n    return func\ndef check_if_configurable(func: Callable, phase_name: str) -> bool:\n    return (\n        func.__configurable__ if hasattr(func, \"__configurable__\") else False\n    )",
        "detail": "tali_wit.decorators",
        "documentation": {}
    },
    {
        "label": "check_if_configurable",
        "kind": 2,
        "importPath": "tali_wit.decorators",
        "description": "tali_wit.decorators",
        "peekOfCode": "def check_if_configurable(func: Callable, phase_name: str) -> bool:\n    return (\n        func.__configurable__ if hasattr(func, \"__configurable__\") else False\n    )\ndef collect_metrics(func: Callable) -> Callable:\n    def collect_metrics(\n        step_idx: int,\n        metrics_dict: dict(),\n        phase_name: str,\n        experiment_tracker: Any,",
        "detail": "tali_wit.decorators",
        "documentation": {}
    },
    {
        "label": "collect_metrics",
        "kind": 2,
        "importPath": "tali_wit.decorators",
        "description": "tali_wit.decorators",
        "peekOfCode": "def collect_metrics(func: Callable) -> Callable:\n    def collect_metrics(\n        step_idx: int,\n        metrics_dict: dict(),\n        phase_name: str,\n        experiment_tracker: Any,\n    ) -> None:\n        for metric_key, computed_value in metrics_dict.items():\n            if computed_value is not None:\n                value = (",
        "detail": "tali_wit.decorators",
        "documentation": {}
    },
    {
        "label": "Evaluator",
        "kind": 6,
        "importPath": "tali_wit.evaluators",
        "description": "tali_wit.evaluators",
        "peekOfCode": "class Evaluator(object):\n    def __init__(self):\n        pass\n@dataclass\nclass EvaluatorOutput:\n    step_idx: int\n    metrics: Dict\n    phase_name: str\nclass ClassificationEvaluator(Evaluator):\n    def __init__(",
        "detail": "tali_wit.evaluators",
        "documentation": {}
    },
    {
        "label": "EvaluatorOutput",
        "kind": 6,
        "importPath": "tali_wit.evaluators",
        "description": "tali_wit.evaluators",
        "peekOfCode": "class EvaluatorOutput:\n    step_idx: int\n    metrics: Dict\n    phase_name: str\nclass ClassificationEvaluator(Evaluator):\n    def __init__(\n        self, experiment_tracker: wandb.wandb_sdk.wandb_run.Run = None\n    ):\n        super().__init__()\n        self.epoch_metrics = {}",
        "detail": "tali_wit.evaluators",
        "documentation": {}
    },
    {
        "label": "ClassificationEvaluator",
        "kind": 6,
        "importPath": "tali_wit.evaluators",
        "description": "tali_wit.evaluators",
        "peekOfCode": "class ClassificationEvaluator(Evaluator):\n    def __init__(\n        self, experiment_tracker: wandb.wandb_sdk.wandb_run.Run = None\n    ):\n        super().__init__()\n        self.epoch_metrics = {}\n        self.experiment_tracker = experiment_tracker\n    def validation_step(\n        self,\n        model,",
        "detail": "tali_wit.evaluators",
        "documentation": {}
    },
    {
        "label": "get_dict_shapes",
        "kind": 2,
        "importPath": "tali_wit.evaluators",
        "description": "tali_wit.evaluators",
        "peekOfCode": "def get_dict_shapes(x):\n    return (\n        {\n            key: value.shape if isinstance(value, torch.Tensor) else len(value)\n            for key, value in x.items()\n        }\n        if isinstance(x, dict)\n        else get_dict_shapes(x.__dict__)\n    )\nclass Evaluator(object):",
        "detail": "tali_wit.evaluators",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tali_wit.evaluators",
        "description": "tali_wit.evaluators",
        "peekOfCode": "logger = get_logger(__name__)\ndef get_dict_shapes(x):\n    return (\n        {\n            key: value.shape if isinstance(value, torch.Tensor) else len(value)\n            for key, value in x.items()\n        }\n        if isinstance(x, dict)\n        else get_dict_shapes(x.__dict__)\n    )",
        "detail": "tali_wit.evaluators",
        "documentation": {}
    },
    {
        "label": "ModelAndTransform",
        "kind": 6,
        "importPath": "tali_wit.models",
        "description": "tali_wit.models",
        "peekOfCode": "class ModelAndTransform:\n    model: nn.Module\n    transform: Any\n@dataclass\nclass ModalityConfig:\n    support: bool = False\n    pretrained: bool = False\n@dataclass\nclass MultiModalityConfig:\n    image: ModalityConfig = ModalityConfig(support=True, pretrained=True)",
        "detail": "tali_wit.models",
        "documentation": {}
    },
    {
        "label": "ModalityConfig",
        "kind": 6,
        "importPath": "tali_wit.models",
        "description": "tali_wit.models",
        "peekOfCode": "class ModalityConfig:\n    support: bool = False\n    pretrained: bool = False\n@dataclass\nclass MultiModalityConfig:\n    image: ModalityConfig = ModalityConfig(support=True, pretrained=True)\n    text: ModalityConfig = ModalityConfig(support=True, pretrained=True)\n    audio: ModalityConfig = ModalityConfig(support=True, pretrained=True)\n    video: ModalityConfig = ModalityConfig(support=True, pretrained=True)\ndef contrastive_accuracy(logits):",
        "detail": "tali_wit.models",
        "documentation": {}
    },
    {
        "label": "MultiModalityConfig",
        "kind": 6,
        "importPath": "tali_wit.models",
        "description": "tali_wit.models",
        "peekOfCode": "class MultiModalityConfig:\n    image: ModalityConfig = ModalityConfig(support=True, pretrained=True)\n    text: ModalityConfig = ModalityConfig(support=True, pretrained=True)\n    audio: ModalityConfig = ModalityConfig(support=True, pretrained=True)\n    video: ModalityConfig = ModalityConfig(support=True, pretrained=True)\ndef contrastive_accuracy(logits):\n    targets = torch.arange(logits.shape[0]).to(logits.device)\n    accuracy = (logits.argmax(dim=-1) == targets).float().mean()\n    return accuracy\ndef contrastive_accuracy_top_k(logits, k: int = 5):",
        "detail": "tali_wit.models",
        "documentation": {}
    },
    {
        "label": "PositionalEncoding",
        "kind": 6,
        "importPath": "tali_wit.models",
        "description": "tali_wit.models",
        "peekOfCode": "class PositionalEncoding(nn.Module):\n    def __init__(\n        self,\n    ):\n        super().__init__()\n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        \"\"\"\n        Args:\n            x: Tensor, shape [batch_size, seq_len, embedding_dim]\n        \"\"\"",
        "detail": "tali_wit.models",
        "documentation": {}
    },
    {
        "label": "VideoTransformer",
        "kind": 6,
        "importPath": "tali_wit.models",
        "description": "tali_wit.models",
        "peekOfCode": "class VideoTransformer(nn.Module):\n    def __init__(\n        self,\n        d_model: int,\n        nhead: int,\n        dim_feedforward: int,\n        dropout: float,\n        num_layers: int,\n        batch_first: bool = True,\n        norm_first: bool = True,",
        "detail": "tali_wit.models",
        "documentation": {}
    },
    {
        "label": "TALIModel",
        "kind": 6,
        "importPath": "tali_wit.models",
        "description": "tali_wit.models",
        "peekOfCode": "class TALIModel(nn.Module):\n    def __init__(\n        self,\n        image_text_model_name: str = \"openai/clip-vit-large-patch14\",\n        audio_model_name: str = \"openai/whisper-small\",\n        multi_modality_config: MultiModalityConfig = MultiModalityConfig(),\n        num_video_frames: int = 8,\n        num_audio_frames: int = 8,\n        audio_sampling_rate: int = 16000,\n    ):",
        "detail": "tali_wit.models",
        "documentation": {}
    },
    {
        "label": "contrastive_accuracy",
        "kind": 2,
        "importPath": "tali_wit.models",
        "description": "tali_wit.models",
        "peekOfCode": "def contrastive_accuracy(logits):\n    targets = torch.arange(logits.shape[0]).to(logits.device)\n    accuracy = (logits.argmax(dim=-1) == targets).float().mean()\n    return accuracy\ndef contrastive_accuracy_top_k(logits, k: int = 5):\n    targets = torch.arange(logits.shape[0]).to(logits.device)\n    accuracy = [\n        any(logit.argsort(dim=-1, descending=True)[:k] == target)\n        for logit, target in zip(logits, targets)\n    ]",
        "detail": "tali_wit.models",
        "documentation": {}
    },
    {
        "label": "contrastive_accuracy_top_k",
        "kind": 2,
        "importPath": "tali_wit.models",
        "description": "tali_wit.models",
        "peekOfCode": "def contrastive_accuracy_top_k(logits, k: int = 5):\n    targets = torch.arange(logits.shape[0]).to(logits.device)\n    accuracy = [\n        any(logit.argsort(dim=-1, descending=True)[:k] == target)\n        for logit, target in zip(logits, targets)\n    ]\n    return torch.mean(torch.tensor(accuracy).float())\ndef num_parameters(\n    model, only_trainable: bool = False, exclude_embeddings: bool = False\n) -> int:",
        "detail": "tali_wit.models",
        "documentation": {}
    },
    {
        "label": "num_parameters",
        "kind": 2,
        "importPath": "tali_wit.models",
        "description": "tali_wit.models",
        "peekOfCode": "def num_parameters(\n    model, only_trainable: bool = False, exclude_embeddings: bool = False\n) -> int:\n    \"\"\"\n    Get number of (optionally, trainable or non-embeddings) parameters in the module.\n    Args:\n        only_trainable (`bool`, *optional*, defaults to `False`):\n            Whether or not to return only the number of trainable parameters\n        exclude_embeddings (`bool`, *optional*, defaults to `False`):\n            Whether or not to return only the number of non-embeddings parameters",
        "detail": "tali_wit.models",
        "documentation": {}
    },
    {
        "label": "get_device",
        "kind": 2,
        "importPath": "tali_wit.models",
        "description": "tali_wit.models",
        "peekOfCode": "def get_device():\n    return torch.cuda.current_device() if torch.cuda.is_available() else \"cpu\"\ndef get_similarities(\n    modality_a_name: str,\n    modality_b_name: str,\n    tensor_modality_a: torch.Tensor,\n    tensor_modality_b: torch.Tensor,\n    logit_scale: torch.Tensor,\n    return_loss: bool = False,\n) -> torch.Tensor:",
        "detail": "tali_wit.models",
        "documentation": {}
    },
    {
        "label": "get_similarities",
        "kind": 2,
        "importPath": "tali_wit.models",
        "description": "tali_wit.models",
        "peekOfCode": "def get_similarities(\n    modality_a_name: str,\n    modality_b_name: str,\n    tensor_modality_a: torch.Tensor,\n    tensor_modality_b: torch.Tensor,\n    logit_scale: torch.Tensor,\n    return_loss: bool = False,\n) -> torch.Tensor:\n    \"\"\"\n    Args:",
        "detail": "tali_wit.models",
        "documentation": {}
    },
    {
        "label": "extract_all_possible_pairs",
        "kind": 2,
        "importPath": "tali_wit.models",
        "description": "tali_wit.models",
        "peekOfCode": "def extract_all_possible_pairs(batch_dict):\n    from itertools import combinations\n    modality_dict = {}\n    for key, value in batch_dict.items():\n        if isinstance(value, dict):\n            modality_dict[key] = list(value.keys())\n    pairs_keys = combinations(list(modality_dict.keys()), 2)\n    # get all possible pairs of two lists\n    pairs = []\n    for key1, key2 in pairs_keys:",
        "detail": "tali_wit.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tali_wit.models",
        "description": "tali_wit.models",
        "peekOfCode": "logger = get_logger(__name__, set_default_rich_handler=True)\n@dataclass\nclass ModelAndTransform:\n    model: nn.Module\n    transform: Any\n@dataclass\nclass ModalityConfig:\n    support: bool = False\n    pretrained: bool = False\n@dataclass",
        "detail": "tali_wit.models",
        "documentation": {}
    },
    {
        "label": "instantiate_callbacks",
        "kind": 2,
        "importPath": "tali_wit.run",
        "description": "tali_wit.run",
        "peekOfCode": "def instantiate_callbacks(callback_dict: dict) -> List[Callback]:\n    callbacks = []\n    for cb_conf in callback_dict.values():\n        callbacks.append(instantiate(cb_conf))\n    return callbacks\ndef create_hf_model_repo_and_download_maybe(cfg: BaseConfig):\n    import orjson\n    import yaml\n    from huggingface_hub import HfApi\n    if (",
        "detail": "tali_wit.run",
        "documentation": {}
    },
    {
        "label": "create_hf_model_repo_and_download_maybe",
        "kind": 2,
        "importPath": "tali_wit.run",
        "description": "tali_wit.run",
        "peekOfCode": "def create_hf_model_repo_and_download_maybe(cfg: BaseConfig):\n    import orjson\n    import yaml\n    from huggingface_hub import HfApi\n    if (\n        cfg.download_checkpoint_with_name is not None\n        and cfg.download_latest is True\n    ):\n        raise ValueError(\n            \"Cannot use both continue_from_checkpoint_with_name and continue_from_latest\"",
        "detail": "tali_wit.run",
        "documentation": {}
    },
    {
        "label": "upload_code_to_wandb",
        "kind": 2,
        "importPath": "tali_wit.run",
        "description": "tali_wit.run",
        "peekOfCode": "def upload_code_to_wandb(code_dir: Union[pathlib.Path, str]):\n    if isinstance(code_dir, str):\n        code_dir = pathlib.Path(code_dir)\n    code = wandb.Artifact(\"project-source\", type=\"code\")\n    for path in code_dir.resolve().rglob(\"*.py\"):\n        code.add_file(str(path), name=str(path.relative_to(code_dir)))\n    wandb.log_artifact(code)\n@hydra.main(config_path=None, config_name=\"config\", version_base=None)\ndef run(cfg: BaseConfig) -> None:\n    wandb_args = {",
        "detail": "tali_wit.run",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "tali_wit.run",
        "description": "tali_wit.run",
        "peekOfCode": "def run(cfg: BaseConfig) -> None:\n    wandb_args = {\n        key: value for key, value in cfg.wandb_args.items() if key != \"_target_\"\n    }\n    ckpt_path, repo_url = create_hf_model_repo_and_download_maybe(cfg)\n    config_dict = OmegaConf.to_container(cfg, resolve=True)\n    wandb_args[\"config\"] = config_dict\n    wandb_args[\"notes\"] = repo_url\n    wandb.init(**wandb_args)  # init wandb and log config\n    upload_code_to_wandb(cfg.code_dir)  # log code to wandb",
        "detail": "tali_wit.run",
        "documentation": {}
    },
    {
        "label": "]",
        "kind": 5,
        "importPath": "tali_wit.run",
        "description": "tali_wit.run",
        "peekOfCode": "] = \"1\"  # Makes sure that stack traces produced by hydra instantiation functions produce\n# traceback errors related to the modules they built, rather than generic instantiate related errors that\n# are generally useless for debugging\nos.environ[\n    \"TORCH_DISTRIBUTED_DEBUG\"\n] = \"DETAIL\"  # extremely useful when debugging DDP setups\n# os.environ[\"TOKENIZERS_PARALLELISM\"] = \"false\"\ninstall()  # beautiful and clean tracebacks for debugging\nimport pathlib\nfrom typing import Callable, List, Optional, Union",
        "detail": "tali_wit.run",
        "documentation": {}
    },
    {
        "label": "]",
        "kind": 5,
        "importPath": "tali_wit.run",
        "description": "tali_wit.run",
        "peekOfCode": "] = \"DETAIL\"  # extremely useful when debugging DDP setups\n# os.environ[\"TOKENIZERS_PARALLELISM\"] = \"false\"\ninstall()  # beautiful and clean tracebacks for debugging\nimport pathlib\nfrom typing import Callable, List, Optional, Union\nimport hydra\nimport torch\nfrom huggingface_hub import (\n    Repository,\n    create_repo,",
        "detail": "tali_wit.run",
        "documentation": {}
    },
    {
        "label": "config_store",
        "kind": 5,
        "importPath": "tali_wit.run",
        "description": "tali_wit.run",
        "peekOfCode": "config_store = collect_config_store()\nlogger = get_logger(name=__name__)\ndef instantiate_callbacks(callback_dict: dict) -> List[Callback]:\n    callbacks = []\n    for cb_conf in callback_dict.values():\n        callbacks.append(instantiate(cb_conf))\n    return callbacks\ndef create_hf_model_repo_and_download_maybe(cfg: BaseConfig):\n    import orjson\n    import yaml",
        "detail": "tali_wit.run",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tali_wit.run",
        "description": "tali_wit.run",
        "peekOfCode": "logger = get_logger(name=__name__)\ndef instantiate_callbacks(callback_dict: dict) -> List[Callback]:\n    callbacks = []\n    for cb_conf in callback_dict.values():\n        callbacks.append(instantiate(cb_conf))\n    return callbacks\ndef create_hf_model_repo_and_download_maybe(cfg: BaseConfig):\n    import orjson\n    import yaml\n    from huggingface_hub import HfApi",
        "detail": "tali_wit.run",
        "documentation": {}
    },
    {
        "label": "Trainer",
        "kind": 6,
        "importPath": "tali_wit.trainers",
        "description": "tali_wit.trainers",
        "peekOfCode": "class Trainer(object):\n    def __init__(self):\n        pass\n@dataclass\nclass TrainerOutput:\n    opt_loss: torch.Tensor\n    step_idx: int\n    metrics: Dict[str, Any]\n    phase_name: str\nclass ClassificationTrainer(Trainer):",
        "detail": "tali_wit.trainers",
        "documentation": {}
    },
    {
        "label": "TrainerOutput",
        "kind": 6,
        "importPath": "tali_wit.trainers",
        "description": "tali_wit.trainers",
        "peekOfCode": "class TrainerOutput:\n    opt_loss: torch.Tensor\n    step_idx: int\n    metrics: Dict[str, Any]\n    phase_name: str\nclass ClassificationTrainer(Trainer):\n    def __init__(\n        self,\n        optimizer: torch.optim.Optimizer,\n        scheduler: torch.optim.lr_scheduler._LRScheduler = None,",
        "detail": "tali_wit.trainers",
        "documentation": {}
    },
    {
        "label": "ClassificationTrainer",
        "kind": 6,
        "importPath": "tali_wit.trainers",
        "description": "tali_wit.trainers",
        "peekOfCode": "class ClassificationTrainer(Trainer):\n    def __init__(\n        self,\n        optimizer: torch.optim.Optimizer,\n        scheduler: torch.optim.lr_scheduler._LRScheduler = None,\n        scheduler_interval: str = Interval.STEP,\n        experiment_tracker: wandb.wandb_sdk.wandb_run.Run = None,\n    ):\n        super().__init__()\n        self.optimizer = optimizer",
        "detail": "tali_wit.trainers",
        "documentation": {}
    },
    {
        "label": "get_dict_shapes",
        "kind": 2,
        "importPath": "tali_wit.trainers",
        "description": "tali_wit.trainers",
        "peekOfCode": "def get_dict_shapes(x):\n    if not isinstance(x, dict):\n        return get_dict_shapes(x.__dict__)\n    return {\n        key: value.shape if isinstance(value, torch.Tensor) else len(value)\n        for key, value in x.items()\n    }\nclass Trainer(object):\n    def __init__(self):\n        pass",
        "detail": "tali_wit.trainers",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tali_wit.trainers",
        "description": "tali_wit.trainers",
        "peekOfCode": "logger = get_logger(__name__)\ndef get_dict_shapes(x):\n    if not isinstance(x, dict):\n        return get_dict_shapes(x.__dict__)\n    return {\n        key: value.shape if isinstance(value, torch.Tensor) else len(value)\n        for key, value in x.items()\n    }\nclass Trainer(object):\n    def __init__(self):",
        "detail": "tali_wit.trainers",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "kind": 2,
        "importPath": "tali_wit.utils",
        "description": "tali_wit.utils",
        "peekOfCode": "def get_logger(\n    name=__name__, set_default_rich_handler=False\n) -> logging.Logger:\n    \"\"\"Initializes multi-GPU-friendly python command line logger.\"\"\"\n    logger = logging.getLogger(name)\n    if set_default_rich_handler:\n        logger.setLevel(logging.DEBUG)\n        ch = RichHandler()\n        ch.setLevel(logging.DEBUG)\n        # create formatter",
        "detail": "tali_wit.utils",
        "documentation": {}
    },
    {
        "label": "demo_logger",
        "kind": 2,
        "importPath": "tali_wit.utils",
        "description": "tali_wit.utils",
        "peekOfCode": "def demo_logger():\n    logger = get_logger(__name__, set_default_rich_handler=True)\n    logger.info(\"Hello World\")\n    logger.debug(\"Debugging\")\n    logger.warning(\"Warning\")\n    logger.error(\"Error\")\n    logger.critical(\"Critical\")\n    logger.exception(\"Exception\")\ndef set_seed(seed: int):\n    random.seed(seed)",
        "detail": "tali_wit.utils",
        "documentation": {}
    },
    {
        "label": "set_seed",
        "kind": 2,
        "importPath": "tali_wit.utils",
        "description": "tali_wit.utils",
        "peekOfCode": "def set_seed(seed: int):\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\ndef pretty_config(\n    config: DictConfig,\n    resolve: bool = True,\n):\n    \"\"\"Prints content of DictConfig using Rich library and its tree structure.",
        "detail": "tali_wit.utils",
        "documentation": {}
    },
    {
        "label": "pretty_config",
        "kind": 2,
        "importPath": "tali_wit.utils",
        "description": "tali_wit.utils",
        "peekOfCode": "def pretty_config(\n    config: DictConfig,\n    resolve: bool = True,\n):\n    \"\"\"Prints content of DictConfig using Rich library and its tree structure.\n    Args:\n        config (DictConfig): Configuration composed by Hydra.\n        fields (Sequence[str], optional): Determines which main fields from config will\n        be printed and in what order.\n        resolve (bool, optional): Whether to resolve reference fields of DictConfig.",
        "detail": "tali_wit.utils",
        "documentation": {}
    },
    {
        "label": "save_json",
        "kind": 2,
        "importPath": "tali_wit.utils",
        "description": "tali_wit.utils",
        "peekOfCode": "def save_json(\n    filepath: Union[str, pathlib.Path], dict_to_store: Dict, overwrite=True\n):\n    \"\"\"\n    Saves a metrics .json file with the metrics\n    :param log_dir: Directory of log\n    :param metrics_file_name: Name of .csv file\n    :param dict_to_store: A dict of metrics to add in the file\n    :param overwrite: If True overwrites any existing files with the same filepath,\n    if False adds metrics to existing",
        "detail": "tali_wit.utils",
        "documentation": {}
    },
    {
        "label": "load_json",
        "kind": 2,
        "importPath": "tali_wit.utils",
        "description": "tali_wit.utils",
        "peekOfCode": "def load_json(filepath: Union[str, pathlib.Path]):\n    \"\"\"\n    Loads the metrics in a dictionary.\n    :param log_dir: The directory in which the log is saved\n    :param metrics_file_name: The name of the metrics file\n    :return: A dict with the metrics\n    \"\"\"\n    if isinstance(filepath, str):\n        filepath = pathlib.Path(filepath)\n    with open(filepath, \"rb\") as json_file:",
        "detail": "tali_wit.utils",
        "documentation": {}
    },
    {
        "label": "processor",
        "kind": 5,
        "importPath": "debug",
        "description": "debug",
        "peekOfCode": "processor = WhisperProcessor.from_pretrained(\"openai/whisper-large-v2\")\nmodel = WhisperForConditionalGeneration.from_pretrained(\n    \"openai/whisper-large-v2\"\n)\nmodel.config.forced_decoder_ids = None\n# load dummy dataset and read audio files\nds = load_dataset(\n    \"hf-internal-testing/librispeech_asr_dummy\", \"clean\", split=\"validation\"\n)\nsampling_rate = ds[0][\"audio\"][\"sampling_rate\"]",
        "detail": "debug",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "debug",
        "description": "debug",
        "peekOfCode": "model = WhisperForConditionalGeneration.from_pretrained(\n    \"openai/whisper-large-v2\"\n)\nmodel.config.forced_decoder_ids = None\n# load dummy dataset and read audio files\nds = load_dataset(\n    \"hf-internal-testing/librispeech_asr_dummy\", \"clean\", split=\"validation\"\n)\nsampling_rate = ds[0][\"audio\"][\"sampling_rate\"]\nsample = (",
        "detail": "debug",
        "documentation": {}
    },
    {
        "label": "model.config.forced_decoder_ids",
        "kind": 5,
        "importPath": "debug",
        "description": "debug",
        "peekOfCode": "model.config.forced_decoder_ids = None\n# load dummy dataset and read audio files\nds = load_dataset(\n    \"hf-internal-testing/librispeech_asr_dummy\", \"clean\", split=\"validation\"\n)\nsampling_rate = ds[0][\"audio\"][\"sampling_rate\"]\nsample = (\n    torch.tensor(ds[0][\"audio\"][\"array\"]).unsqueeze(0).repeat(8, 1).unbind(0)\n)\ninput_features = processor(",
        "detail": "debug",
        "documentation": {}
    },
    {
        "label": "ds",
        "kind": 5,
        "importPath": "debug",
        "description": "debug",
        "peekOfCode": "ds = load_dataset(\n    \"hf-internal-testing/librispeech_asr_dummy\", \"clean\", split=\"validation\"\n)\nsampling_rate = ds[0][\"audio\"][\"sampling_rate\"]\nsample = (\n    torch.tensor(ds[0][\"audio\"][\"array\"]).unsqueeze(0).repeat(8, 1).unbind(0)\n)\ninput_features = processor(\n    sample, sampling_rate=sampling_rate, return_tensors=\"pt\"\n).input_features",
        "detail": "debug",
        "documentation": {}
    },
    {
        "label": "sampling_rate",
        "kind": 5,
        "importPath": "debug",
        "description": "debug",
        "peekOfCode": "sampling_rate = ds[0][\"audio\"][\"sampling_rate\"]\nsample = (\n    torch.tensor(ds[0][\"audio\"][\"array\"]).unsqueeze(0).repeat(8, 1).unbind(0)\n)\ninput_features = processor(\n    sample, sampling_rate=sampling_rate, return_tensors=\"pt\"\n).input_features\n# # generate token ids\n# predicted_ids = model.generate(input_features)\n# # decode token ids to text",
        "detail": "debug",
        "documentation": {}
    },
    {
        "label": "sample",
        "kind": 5,
        "importPath": "debug",
        "description": "debug",
        "peekOfCode": "sample = (\n    torch.tensor(ds[0][\"audio\"][\"array\"]).unsqueeze(0).repeat(8, 1).unbind(0)\n)\ninput_features = processor(\n    sample, sampling_rate=sampling_rate, return_tensors=\"pt\"\n).input_features\n# # generate token ids\n# predicted_ids = model.generate(input_features)\n# # decode token ids to text\n# transcription = processor.batch_decode(predicted_ids, skip_special_tokens=False)",
        "detail": "debug",
        "documentation": {}
    },
    {
        "label": "input_features",
        "kind": 5,
        "importPath": "debug",
        "description": "debug",
        "peekOfCode": "input_features = processor(\n    sample, sampling_rate=sampling_rate, return_tensors=\"pt\"\n).input_features\n# # generate token ids\n# predicted_ids = model.generate(input_features)\n# # decode token ids to text\n# transcription = processor.batch_decode(predicted_ids, skip_special_tokens=False)\n# transcription = processor.batch_decode(predicted_ids, skip_special_tokens=True)",
        "detail": "debug",
        "documentation": {}
    }
]